{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HelperNode v2 The HelperNode is a way to satisfy all the prerequisites needed in order to install OpenShift 4. In version 2 of the HelperNode, all prerequisites/services need are run in containers and Ansible is no longer used. For more information about the prerequisites. Please see the official OpenShift documentation site The HelperNode is a node/vm/server that sits on your network running all the services needed in an \"all-in-one\" way. The following diagram shows a highlevel view of where the HelperNode sits on your network. NOTE: You can, and is recommended, delegate a subdomain to the HelperNode if you have a working DNS server in your environment. For example; if you want a $CLUSTERID of ocp4 , and you have a $DOMAIN of example.com . Then you will delegate ocp4.example.com to the HelperNode. The HelperNode is meant to help you install an OpenShift 4 cluster using the Platform Agnostic UPI install method (formerly known as the \"BareMetal UPI\" method). It's not meant to do the install for you. This isn't an automation tool, but rather a tool that should be used with your current automation. HelperNode Prerequisites The helpernodectl utility is only supported/tested with the following: RHEL/CentOS 8 Podman 1.6.4 Firewalld 0.8.0 The version of OpenShift is \"tied\" to the binary. For the current version, we are using OpenShift 4.6.1","title":"Home"},{"location":"#helpernode-v2","text":"The HelperNode is a way to satisfy all the prerequisites needed in order to install OpenShift 4. In version 2 of the HelperNode, all prerequisites/services need are run in containers and Ansible is no longer used. For more information about the prerequisites. Please see the official OpenShift documentation site The HelperNode is a node/vm/server that sits on your network running all the services needed in an \"all-in-one\" way. The following diagram shows a highlevel view of where the HelperNode sits on your network. NOTE: You can, and is recommended, delegate a subdomain to the HelperNode if you have a working DNS server in your environment. For example; if you want a $CLUSTERID of ocp4 , and you have a $DOMAIN of example.com . Then you will delegate ocp4.example.com to the HelperNode. The HelperNode is meant to help you install an OpenShift 4 cluster using the Platform Agnostic UPI install method (formerly known as the \"BareMetal UPI\" method). It's not meant to do the install for you. This isn't an automation tool, but rather a tool that should be used with your current automation.","title":"HelperNode v2"},{"location":"#helpernode-prerequisites","text":"The helpernodectl utility is only supported/tested with the following: RHEL/CentOS 8 Podman 1.6.4 Firewalld 0.8.0 The version of OpenShift is \"tied\" to the binary. For the current version, we are using OpenShift 4.6.1","title":"HelperNode Prerequisites"},{"location":"binary/","text":"Obtaining The Binary In order to install/use the HelperNode, you'll need to obtain the binary by visiting the releases page on GitHub. Current release is v2alpha1 wget https://github.com/RedHatOfficial/ocp4-helpernode/releases/download/v2alpha1/helpernodectl Copy the binary into your $PATH , and make it executable. sudo cp helpernodectl /usr/local/bin/ sudo chmod +x /usr/local/bin/helpernodectl Global Flags Currently there are two global flags: --config and --log-level Global Flags: -c, --config string config file (default is $HOME/.helpernodectl.yaml) --log-level string log level (e.g. \"debug | info | warn | error\") (default \"info\")","title":"Obtaining The Binary"},{"location":"binary/#obtaining-the-binary","text":"In order to install/use the HelperNode, you'll need to obtain the binary by visiting the releases page on GitHub. Current release is v2alpha1 wget https://github.com/RedHatOfficial/ocp4-helpernode/releases/download/v2alpha1/helpernodectl Copy the binary into your $PATH , and make it executable. sudo cp helpernodectl /usr/local/bin/ sudo chmod +x /usr/local/bin/helpernodectl","title":"Obtaining The Binary"},{"location":"binary/#global-flags","text":"Currently there are two global flags: --config and --log-level Global Flags: -c, --config string config file (default is $HOME/.helpernodectl.yaml) --log-level string log level (e.g. \"debug | info | warn | error\") (default \"info\")","title":"Global Flags"},{"location":"bootstrap-section/","text":"Bootstrap Node Section This section defines the bootstrap node configuration. bootstrap: name: \"bootstrap\" ipaddr: \"192.168.7.20\" macaddr: \"52:54:00:60:72:67\" disk: vda The options are: bootstrap.name - The hostname (WITHOUT the fqdn) of the bootstrap node you want to set bootstrap.ipaddr - The IP address that you want set (this modifies the dhcp config file, the dns zonefile, and the reverse dns zonefile) bootstrap.macaddr - The mac address for dhcp reservation. This option is not needed if you're doing static ips. bootstrap.disk - The disk that will be used to install RHCOS onto.","title":"Bootstrap Node Section"},{"location":"bootstrap-section/#bootstrap-node-section","text":"This section defines the bootstrap node configuration. bootstrap: name: \"bootstrap\" ipaddr: \"192.168.7.20\" macaddr: \"52:54:00:60:72:67\" disk: vda The options are: bootstrap.name - The hostname (WITHOUT the fqdn) of the bootstrap node you want to set bootstrap.ipaddr - The IP address that you want set (this modifies the dhcp config file, the dns zonefile, and the reverse dns zonefile) bootstrap.macaddr - The mac address for dhcp reservation. This option is not needed if you're doing static ips. bootstrap.disk - The disk that will be used to install RHCOS onto.","title":"Bootstrap Node Section"},{"location":"copy-ign/","text":"Copy Ignition Configs This command takes ignition configurations from the given directory, and copies those files into the http contianer. For example: Example: helpernodectl copy-ign --dir=./ocp4/ This command must be run on the host that is to be the helpernode. There is no support for copying the ignition files to an external webserver. Usage: helpernodectl copy-ign --dir /path/to/openshift/install/directory","title":"Copy Ignition Configs"},{"location":"copy-ign/#copy-ignition-configs","text":"This command takes ignition configurations from the given directory, and copies those files into the http contianer. For example: Example: helpernodectl copy-ign --dir=./ocp4/ This command must be run on the host that is to be the helpernode. There is no support for copying the ignition files to an external webserver. Usage: helpernodectl copy-ign --dir /path/to/openshift/install/directory","title":"Copy Ignition Configs"},{"location":"dhcp-section/","text":"DHCP Service Section This section sets up the DHCP server. dhcp: router: \"192.168.7.1\" bcast: \"192.168.7.255\" netmask: \"255.255.255.0\" poolstart: \"192.168.7.10\" poolend: \"192.168.7.30\" ipid: \"192.168.7.0\" netmaskid: \"255.255.255.0\" Explanation of the options you can set: dhcp.router - This is the default gateway of your network you're going to assign to the masters/workers dhcp.bcast - This is the broadcast address for your network dhcp.netmask - This is the netmask that gets assigned to your masters/workers dhcp.poolstart - This is the first address in your dhcp address pool dhcp.poolend - This is the last address in your dhcp address pool dhcp.ipid - This is the ip network id for the range dhcp.netmaskid - This is the networkmask id for the range. DHCP is OPTIONAL if doing static ips. These variables are used to set up the dhcp config file. Note, that you need to also set up the DNS section if using DHCP, even if you're not using the HelperNode DNS server. This is because the DHCP service uses that configuration fo hand out the DNS information via DHCP. Just set the DNS section to whichever DNS server(s) you're using.","title":"DHCP Server Section"},{"location":"dhcp-section/#dhcp-service-section","text":"This section sets up the DHCP server. dhcp: router: \"192.168.7.1\" bcast: \"192.168.7.255\" netmask: \"255.255.255.0\" poolstart: \"192.168.7.10\" poolend: \"192.168.7.30\" ipid: \"192.168.7.0\" netmaskid: \"255.255.255.0\" Explanation of the options you can set: dhcp.router - This is the default gateway of your network you're going to assign to the masters/workers dhcp.bcast - This is the broadcast address for your network dhcp.netmask - This is the netmask that gets assigned to your masters/workers dhcp.poolstart - This is the first address in your dhcp address pool dhcp.poolend - This is the last address in your dhcp address pool dhcp.ipid - This is the ip network id for the range dhcp.netmaskid - This is the networkmask id for the range. DHCP is OPTIONAL if doing static ips. These variables are used to set up the dhcp config file. Note, that you need to also set up the DNS section if using DHCP, even if you're not using the HelperNode DNS server. This is because the DHCP service uses that configuration fo hand out the DNS information via DHCP. Just set the DNS section to whichever DNS server(s) you're using.","title":"DHCP Service Section"},{"location":"disabled-section/","text":"Disabled Services Section By default, the HelperNode CLI utility starts all \"core\" services. If you're only using a subset of services, you can specify the ones you don't want to start. disabledServices: - dhcp - pxe Current list of \"core\" services: pxe http loadbalancer dns dhcp","title":"Disabled Services Section"},{"location":"disabled-section/#disabled-services-section","text":"By default, the HelperNode CLI utility starts all \"core\" services. If you're only using a subset of services, you can specify the ones you don't want to start. disabledServices: - dhcp - pxe Current list of \"core\" services: pxe http loadbalancer dns dhcp","title":"Disabled Services Section"},{"location":"dns-section/","text":"DNS Service Section This section sets up your DNS server. dns: domain: \"example.com\" clusterid: \"ocp4\" forwarder1: \"8.8.8.8\" forwarder2: \"8.8.4.4\" Explanation of the DNS variables: dns.domain - This is what domain the installed DNS server will have. This needs to match what you will put for the baseDomain inside the install-config.yaml OpenShift installer configuration file. dns.clusterid - This is what your clusterid will be named and needs to match what is in metadata.name inside the install-config.yaml file. dns.forwarder1 - This will be set up as the DNS forwarder. This is usually one of the corporate (or \"upstream\") DNS servers. dns.forwarder2 - This will be set up as the second DNS forwarder. This is usually one of the corporate (or \"upstream\") DNS servers. The DNS server will be set up using dns.clusterid + dns.domain as the domain it's serving. In the above example, the helper will be setup to be the SOA for ocp4.example.com . NOTE: Although you CAN use the helper as your dns server. It's best to have your DNS server delegate the dns.clusterid + dns.domain domain to the helper (i.e. Delegate ocp4.example.com to the helper) The DNS section is optional, and only needed if you need to run the DNS server.","title":"DNS Server Section"},{"location":"dns-section/#dns-service-section","text":"This section sets up your DNS server. dns: domain: \"example.com\" clusterid: \"ocp4\" forwarder1: \"8.8.8.8\" forwarder2: \"8.8.4.4\" Explanation of the DNS variables: dns.domain - This is what domain the installed DNS server will have. This needs to match what you will put for the baseDomain inside the install-config.yaml OpenShift installer configuration file. dns.clusterid - This is what your clusterid will be named and needs to match what is in metadata.name inside the install-config.yaml file. dns.forwarder1 - This will be set up as the DNS forwarder. This is usually one of the corporate (or \"upstream\") DNS servers. dns.forwarder2 - This will be set up as the second DNS forwarder. This is usually one of the corporate (or \"upstream\") DNS servers. The DNS server will be set up using dns.clusterid + dns.domain as the domain it's serving. In the above example, the helper will be setup to be the SOA for ocp4.example.com . NOTE: Although you CAN use the helper as your dns server. It's best to have your DNS server delegate the dns.clusterid + dns.domain domain to the helper (i.e. Delegate ocp4.example.com to the helper) The DNS section is optional, and only needed if you need to run the DNS server.","title":"DNS Service Section"},{"location":"get-clients/","text":"Get Clients This will get the needed clients from the holding container. Which is, by default, the http container. It saves these in your current working directory. Example: helpernodectl get-clients Currently, the clients that are provided are: helm kubectl oc openshift-install These are provided via a compressed tarball (i.e. tar.gz ). It is left to the user to extract them in the proper $PATH location.","title":"Get Clients"},{"location":"get-clients/#get-clients","text":"This will get the needed clients from the holding container. Which is, by default, the http container. It saves these in your current working directory. Example: helpernodectl get-clients Currently, the clients that are provided are: helm kubectl oc openshift-install These are provided via a compressed tarball (i.e. tar.gz ). It is left to the user to extract them in the proper $PATH location.","title":"Get Clients"},{"location":"h3p1/","text":"Holder 3 Page 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. pwd Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. some: yaml: - goes - here","title":"Head 3 Placeholder 1"},{"location":"h3p1/#holder-3-page-1","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. pwd Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. some: yaml: - goes - here","title":"Holder 3 Page 1"},{"location":"h3p2/","text":"Holder 3 Page 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. pwd Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. some: yaml: - goes - here","title":"Head 3 Placeholder 2"},{"location":"h3p2/#holder-3-page-2","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. pwd Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. some: yaml: - goes - here","title":"Holder 3 Page 2"},{"location":"helper-section/","text":"Helper Section This section sets up the variables for the server/vm/node where the HelperNode services will run. helper: name: \"helper\" ipaddr: \"192.168.7.77\" networkifacename: \"ens3\" This is how it breaks down helper.name - REQUIRED: This needs to be set to the hostname you want your helper to be (some people leave it as \"helper\" others change it to \"bastion\"). This will create an entry in the DNS service. helper.ipaddr - REQUIRED Set this to the current IP address of the helper. This is used to set up the reverse dns definition of not only the HelperNode itself, but also the in-addr.arpa configuration in DNS. helper.networkifacename - REQUIRED: This is set to the interface that has the helper.ipaddr ip address. NOTE: The helper.networkifacename is the ACTUAL name of the interface, NOT the NetworkManager name (you should NEVER need to set it to something like System eth0 . Set it to what you see when you run the ip addr command)","title":"Helper Section"},{"location":"helper-section/#helper-section","text":"This section sets up the variables for the server/vm/node where the HelperNode services will run. helper: name: \"helper\" ipaddr: \"192.168.7.77\" networkifacename: \"ens3\" This is how it breaks down helper.name - REQUIRED: This needs to be set to the hostname you want your helper to be (some people leave it as \"helper\" others change it to \"bastion\"). This will create an entry in the DNS service. helper.ipaddr - REQUIRED Set this to the current IP address of the helper. This is used to set up the reverse dns definition of not only the HelperNode itself, but also the in-addr.arpa configuration in DNS. helper.networkifacename - REQUIRED: This is set to the interface that has the helper.ipaddr ip address. NOTE: The helper.networkifacename is the ACTUAL name of the interface, NOT the NetworkManager name (you should NEVER need to set it to something like System eth0 . Set it to what you see when you run the ip addr command)","title":"Helper Section"},{"location":"install-yaml/","text":"Install Bootstrapping The install subcommand pulls the default \"core\" images onto the node and sets up initial ~/.helpernodectl.yaml config file. Example: helpernodectl install Currently, the default \"core\" images being pulled are: quay.io/helpernode/pxe quay.io/helpernode/http quay.io/helpernode/loadbalancer quay.io/helpernode/dns quay.io/helpernode/dhcp","title":"Install Bootstrapping"},{"location":"install-yaml/#install-bootstrapping","text":"The install subcommand pulls the default \"core\" images onto the node and sets up initial ~/.helpernodectl.yaml config file. Example: helpernodectl install Currently, the default \"core\" images being pulled are: quay.io/helpernode/pxe quay.io/helpernode/http quay.io/helpernode/loadbalancer quay.io/helpernode/dns quay.io/helpernode/dhcp","title":"Install Bootstrapping"},{"location":"master-section/","text":"Master Nodes Section Similar to the bootstrap section; this sets up master node configuration. Please note that this is an array. masters: - name: \"master0\" ipaddr: \"192.168.7.21\" macaddr: \"52:54:00:e7:9d:67\" disk: vda - name: \"master1\" ipaddr: \"192.168.7.22\" macaddr: \"52:54:00:80:16:23\" disk: vda - name: \"master2\" ipaddr: \"192.168.7.23\" macaddr: \"52:54:00:d5:1c:39\" disk: vda masters.name - The hostname (WITHOUT the fqdn) of the master node you want to set (x of 3). masters.ipaddr - The IP address (x of 3) that you want set (this modifies the dhcp config file, the dns zonefile, and the reverse dns zonefile) masters.macaddr - The mac address for dhcp reservation. This option is not needed if you're doing static ips. masters.disk - The name of the disk to install RHCOS onto. NOTE: 3 Masters are MANDATORY for installation of OpenShift 4","title":"Master Nodes Section"},{"location":"master-section/#master-nodes-section","text":"Similar to the bootstrap section; this sets up master node configuration. Please note that this is an array. masters: - name: \"master0\" ipaddr: \"192.168.7.21\" macaddr: \"52:54:00:e7:9d:67\" disk: vda - name: \"master1\" ipaddr: \"192.168.7.22\" macaddr: \"52:54:00:80:16:23\" disk: vda - name: \"master2\" ipaddr: \"192.168.7.23\" macaddr: \"52:54:00:d5:1c:39\" disk: vda masters.name - The hostname (WITHOUT the fqdn) of the master node you want to set (x of 3). masters.ipaddr - The IP address (x of 3) that you want set (this modifies the dhcp config file, the dns zonefile, and the reverse dns zonefile) masters.macaddr - The mac address for dhcp reservation. This option is not needed if you're doing static ips. masters.disk - The name of the disk to install RHCOS onto. NOTE: 3 Masters are MANDATORY for installation of OpenShift 4","title":"Master Nodes Section"},{"location":"preflight/","text":"Preflight The preflight subcommand checks for port conflicts, systemd/service conflicts, and firewall rules on the host and can optionally fix errors it finds. Example: helpernodectl preflight This will only report conflicts/errors and leaves it up to the user to fix/reconcile. You can optionally fix systemd and firewall rules by passing the --fix-all flag (EXPERIMENTAL). Example: helpernodectl preflight --fix-all Again, this is experimental and assumes you have firewalld running on a RHEL/CentOS 8 server/node/machine/vm.","title":"Preflight Checks"},{"location":"preflight/#preflight","text":"The preflight subcommand checks for port conflicts, systemd/service conflicts, and firewall rules on the host and can optionally fix errors it finds. Example: helpernodectl preflight This will only report conflicts/errors and leaves it up to the user to fix/reconcile. You can optionally fix systemd and firewall rules by passing the --fix-all flag (EXPERIMENTAL). Example: helpernodectl preflight --fix-all Again, this is experimental and assumes you have firewalld running on a RHEL/CentOS 8 server/node/machine/vm.","title":"Preflight"},{"location":"pull/","text":"Pull The pull subcommand pulls the default \"core\" images onto the node and sets up initial ~/.helpernodectl.yaml config file. Example: helpernodectl pull Currently, the default \"core\" images being pulled are: quay.io/helpernode/pxe quay.io/helpernode/http quay.io/helpernode/loadbalancer quay.io/helpernode/dns quay.io/helpernode/dhcp Disconnected Pulling If you are running the HelperNode in a disconnected environment (and have pulled/tagged/pushed the core images into your registry), you can use the HELPERNODE_IMAGE_PREFIX environment variable to indicate what registry plus prefix you'd like to use. Example: export HELPERNODE_IMAGE_PREFIX=registry.example.com:5000/mystuff This will result in the images having the prefix of registry.example.com:5000/mystuff and suffix of /helpernode/<service> . For example with the HELPERNODE_IMAGE_PREFIX set to registry.example.com:5000/mystuff the helpernodectl pull command will try and pull the following: registry.example.com:5000/mystuff/helpernode/pxe registry.example.com:5000/mystuff/helpernode/http registry.example.com:5000/mystuff/helpernode/loadbalancer registry.example.com:5000/mystuff/helpernode/dns registry.example.com:5000/mystuff/helpernode/dhcp","title":"Pulling Images"},{"location":"pull/#pull","text":"The pull subcommand pulls the default \"core\" images onto the node and sets up initial ~/.helpernodectl.yaml config file. Example: helpernodectl pull Currently, the default \"core\" images being pulled are: quay.io/helpernode/pxe quay.io/helpernode/http quay.io/helpernode/loadbalancer quay.io/helpernode/dns quay.io/helpernode/dhcp","title":"Pull"},{"location":"pull/#disconnected-pulling","text":"If you are running the HelperNode in a disconnected environment (and have pulled/tagged/pushed the core images into your registry), you can use the HELPERNODE_IMAGE_PREFIX environment variable to indicate what registry plus prefix you'd like to use. Example: export HELPERNODE_IMAGE_PREFIX=registry.example.com:5000/mystuff This will result in the images having the prefix of registry.example.com:5000/mystuff and suffix of /helpernode/<service> . For example with the HELPERNODE_IMAGE_PREFIX set to registry.example.com:5000/mystuff the helpernodectl pull command will try and pull the following: registry.example.com:5000/mystuff/helpernode/pxe registry.example.com:5000/mystuff/helpernode/http registry.example.com:5000/mystuff/helpernode/loadbalancer registry.example.com:5000/mystuff/helpernode/dns registry.example.com:5000/mystuff/helpernode/dhcp","title":"Disconnected Pulling"},{"location":"sample-yamls/","text":"Sample YAML Configurations Sample configuration files can be found here. These are samples of most common use cases. Full Stack A \"fullstack\" install of the HelperNode services. version: v2 arch: \"x86_64\" helper: name: \"helper\" ipaddr: \"192.168.7.77\" networkifacename: \"ens3\" dns: domain: \"example.com\" clusterid: \"ocp4\" forwarder1: \"8.8.8.8\" forwarder2: \"8.8.4.4\" dhcp: router: \"192.168.7.1\" bcast: \"192.168.7.255\" netmask: \"255.255.255.0\" poolstart: \"192.168.7.10\" poolend: \"192.168.7.30\" ipid: \"192.168.7.0\" netmaskid: \"255.255.255.0\" bootstrap: name: \"bootstrap\" ipaddr: \"192.168.7.20\" macaddr: \"52:54:00:60:72:67\" disk: vda masters: - name: \"master0\" ipaddr: \"192.168.7.21\" macaddr: \"52:54:00:e7:9d:67\" disk: vda - name: \"master1\" ipaddr: \"192.168.7.22\" macaddr: \"52:54:00:80:16:23\" disk: vda - name: \"master2\" ipaddr: \"192.168.7.23\" macaddr: \"52:54:00:d5:1c:39\" disk: vda workers: - name: \"worker0\" ipaddr: \"192.168.7.11\" macaddr: \"52:54:00:f4:26:a1\" disk: vda - name: \"worker1\" ipaddr: \"192.168.7.12\" macaddr: \"52:54:00:82:90:00\" disk: vda Static IPs Here is an example if you're doing a \"static ip\" install and don't need all the services. version: v2 arch: \"x86_64\" helper: name: \"helper\" ipaddr: \"192.168.7.77\" networkifacename: \"ens3\" disabledServices: - dhcp - pxe dns: domain: \"example.com\" clusterid: \"ocp4\" forwarder1: \"8.8.8.8\" forwarder2: \"8.8.4.4\" bootstrap: name: \"bootstrap\" ipaddr: \"192.168.7.20\" masters: - name: \"master0\" ipaddr: \"192.168.7.21\" - name: \"master1\" ipaddr: \"192.168.7.22\" - name: \"master2\" ipaddr: \"192.168.7.23\" workers: - name: \"worker0\" ipaddr: \"192.168.7.11\" - name: \"worker1\" ipaddr: \"192.168.7.12\"","title":"Sample YAML Configurations"},{"location":"sample-yamls/#sample-yaml-configurations","text":"Sample configuration files can be found here. These are samples of most common use cases.","title":"Sample YAML Configurations"},{"location":"sample-yamls/#full-stack","text":"A \"fullstack\" install of the HelperNode services. version: v2 arch: \"x86_64\" helper: name: \"helper\" ipaddr: \"192.168.7.77\" networkifacename: \"ens3\" dns: domain: \"example.com\" clusterid: \"ocp4\" forwarder1: \"8.8.8.8\" forwarder2: \"8.8.4.4\" dhcp: router: \"192.168.7.1\" bcast: \"192.168.7.255\" netmask: \"255.255.255.0\" poolstart: \"192.168.7.10\" poolend: \"192.168.7.30\" ipid: \"192.168.7.0\" netmaskid: \"255.255.255.0\" bootstrap: name: \"bootstrap\" ipaddr: \"192.168.7.20\" macaddr: \"52:54:00:60:72:67\" disk: vda masters: - name: \"master0\" ipaddr: \"192.168.7.21\" macaddr: \"52:54:00:e7:9d:67\" disk: vda - name: \"master1\" ipaddr: \"192.168.7.22\" macaddr: \"52:54:00:80:16:23\" disk: vda - name: \"master2\" ipaddr: \"192.168.7.23\" macaddr: \"52:54:00:d5:1c:39\" disk: vda workers: - name: \"worker0\" ipaddr: \"192.168.7.11\" macaddr: \"52:54:00:f4:26:a1\" disk: vda - name: \"worker1\" ipaddr: \"192.168.7.12\" macaddr: \"52:54:00:82:90:00\" disk: vda","title":"Full Stack"},{"location":"sample-yamls/#static-ips","text":"Here is an example if you're doing a \"static ip\" install and don't need all the services. version: v2 arch: \"x86_64\" helper: name: \"helper\" ipaddr: \"192.168.7.77\" networkifacename: \"ens3\" disabledServices: - dhcp - pxe dns: domain: \"example.com\" clusterid: \"ocp4\" forwarder1: \"8.8.8.8\" forwarder2: \"8.8.4.4\" bootstrap: name: \"bootstrap\" ipaddr: \"192.168.7.20\" masters: - name: \"master0\" ipaddr: \"192.168.7.21\" - name: \"master1\" ipaddr: \"192.168.7.22\" - name: \"master2\" ipaddr: \"192.168.7.23\" workers: - name: \"worker0\" ipaddr: \"192.168.7.11\" - name: \"worker1\" ipaddr: \"192.168.7.12\"","title":"Static IPs"},{"location":"saving-yaml/","text":"Saving YAML Config The save subcommand is used to save a configuration file needed to start the HelperNode services. Once saved, you no longer have to pass --config to the start subcommand. Example: helpernodectl save -f helpernode.yaml This will save the provided config file to ~/.helper.yaml","title":"Saving YAML Config"},{"location":"saving-yaml/#saving-yaml-config","text":"The save subcommand is used to save a configuration file needed to start the HelperNode services. Once saved, you no longer have to pass --config to the start subcommand. Example: helpernodectl save -f helpernode.yaml This will save the provided config file to ~/.helper.yaml","title":"Saving YAML Config"},{"location":"set/","text":"Modifying helpernodectl Behavior NOTE: Currently set isn't fully functional The set subcommand is used to set configurations in the ~/.helpernodectl.yaml file. Example: helpernodectl set key=value The ~/.helpernodectl.yaml sets helpernodectl specific configurations, applicable only to the CLI tool.","title":"Modifying helpernodectl Behavior"},{"location":"set/#modifying-helpernodectl-behavior","text":"NOTE: Currently set isn't fully functional The set subcommand is used to set configurations in the ~/.helpernodectl.yaml file. Example: helpernodectl set key=value The ~/.helpernodectl.yaml sets helpernodectl specific configurations, applicable only to the CLI tool.","title":"Modifying helpernodectl Behavior"},{"location":"shell-completion/","text":"Shell Completion Shell completion generates a shell completion script for your shell environment. This assumes you have your shell compeltion package installed ( bash-completion on most RHEL/CentOS systems) Example: source <(helpernodectl completion bash) Usage: helpernodectl completion [bash|zsh|fish|powershell] Currently, only the following shells are supported bash zsh fish powershell","title":"Shell Completion"},{"location":"shell-completion/#shell-completion","text":"Shell completion generates a shell completion script for your shell environment. This assumes you have your shell compeltion package installed ( bash-completion on most RHEL/CentOS systems) Example: source <(helpernodectl completion bash) Usage: helpernodectl completion [bash|zsh|fish|powershell] Currently, only the following shells are supported bash zsh fish powershell","title":"Shell Completion"},{"location":"start/","text":"Starting the HelperNode Services The start subcommand will start the containers needed for the HelperNode to run. It will run, and configure, the services depending on what YAML configuration is passed. Example: helpernodectl start --config helpernode.yaml The --config needs to be passed, unless you performed a save of the config file (which saves it under ~/.helper.yaml ). Preflight Checks A preflight check is performed when you issue the start command. This ensures that there is no conflicts before starting the services. This will sometimes produce a \"false positive\" when making changes and wanting to restart the services. To skip the preflight steps during startup by passing --skip-preflight or the shorthand -s . Example: helpernodectl start --config helpernode.yaml --skip-preflight This will start the services without checking for errors first. Use with caution. Starting Individual Services By default, start will start all \"core\" services. You can start individua services if, for example, you stopped the http container to make a config change in your YAML file; and need to start it up again. Example: helpernodectl start --config helpernode.yaml http You can start multiple services by using a comma ( , ) as a delimiter. Example: helpernodectl start --config helpernode.yaml http,pxe The same caveat of preflight checks applies. You can pass --skip-preflight (or the -s shorthand) to skip these checks. Example: helpernodectl start --config helpernode.yaml dhcp,pxe --skip-preflight","title":"Starting the HelperNode Services"},{"location":"start/#starting-the-helpernode-services","text":"The start subcommand will start the containers needed for the HelperNode to run. It will run, and configure, the services depending on what YAML configuration is passed. Example: helpernodectl start --config helpernode.yaml The --config needs to be passed, unless you performed a save of the config file (which saves it under ~/.helper.yaml ).","title":"Starting the HelperNode Services"},{"location":"start/#preflight-checks","text":"A preflight check is performed when you issue the start command. This ensures that there is no conflicts before starting the services. This will sometimes produce a \"false positive\" when making changes and wanting to restart the services. To skip the preflight steps during startup by passing --skip-preflight or the shorthand -s . Example: helpernodectl start --config helpernode.yaml --skip-preflight This will start the services without checking for errors first. Use with caution.","title":"Preflight Checks"},{"location":"start/#starting-individual-services","text":"By default, start will start all \"core\" services. You can start individua services if, for example, you stopped the http container to make a config change in your YAML file; and need to start it up again. Example: helpernodectl start --config helpernode.yaml http You can start multiple services by using a comma ( , ) as a delimiter. Example: helpernodectl start --config helpernode.yaml http,pxe The same caveat of preflight checks applies. You can pass --skip-preflight (or the -s shorthand) to skip these checks. Example: helpernodectl start --config helpernode.yaml dhcp,pxe --skip-preflight","title":"Starting Individual Services"},{"location":"status/","text":"'Displaying Status' The status subcommand shows the status of the running containers on the host. Example: helpernodectl status Sample Output: Names Status Image helpernode-pxe Up 46 minutes ago registry.example.com:5000/alpha/helpernode/pxe:latest helpernode-loadbalancer Up 46 minutes ago registry.example.com:5000/alpha/helpernode/loadbalancer:latest helpernode-http Up 46 minutes ago registry.example.com:5000/alpha/helpernode/http:latest helpernode-dhcp Up 46 minutes ago registry.example.com:5000/alpha/helpernode/dhcp:latest helpernode-dns Up 46 minutes ago registry.example.com:5000/alpha/helpernode/dns:latest This simply passes you the information provided by the contianer runtime.","title":"Displaying Status"},{"location":"status/#displaying-status","text":"The status subcommand shows the status of the running containers on the host. Example: helpernodectl status Sample Output: Names Status Image helpernode-pxe Up 46 minutes ago registry.example.com:5000/alpha/helpernode/pxe:latest helpernode-loadbalancer Up 46 minutes ago registry.example.com:5000/alpha/helpernode/loadbalancer:latest helpernode-http Up 46 minutes ago registry.example.com:5000/alpha/helpernode/http:latest helpernode-dhcp Up 46 minutes ago registry.example.com:5000/alpha/helpernode/dhcp:latest helpernode-dns Up 46 minutes ago registry.example.com:5000/alpha/helpernode/dns:latest This simply passes you the information provided by the contianer runtime.","title":"'Displaying Status'"},{"location":"stop/","text":"Stopping the HelperNode Services The stop subcommand will stop the HelperNode containers currently running. Example: helpernodectl stop Stopping Individual Services By default, stop will stop all \"core\" services. You can stop individual services if, for example, you want the http container to be shutdown since you don't need it post install. Example: helpernodectl stop http You can stop multiple services by using a comma ( , ) as a delimiter. Example: helpernodectl stop dhcp,pxe","title":"Stopping the HelperNode Services"},{"location":"stop/#stopping-the-helpernode-services","text":"The stop subcommand will stop the HelperNode containers currently running. Example: helpernodectl stop","title":"Stopping the HelperNode Services"},{"location":"stop/#stopping-individual-services","text":"By default, stop will stop all \"core\" services. You can stop individual services if, for example, you want the http container to be shutdown since you don't need it post install. Example: helpernodectl stop http You can stop multiple services by using a comma ( , ) as a delimiter. Example: helpernodectl stop dhcp,pxe","title":"Stopping Individual Services"},{"location":"worker-section/","text":"Worker Nodes Section Similar to the master section; this sets up worker node configuration. Please note that this is an array. \ud83d\udea8 This section is optional if you're installing a compact cluster. workers: - name: \"worker0\" ipaddr: \"192.168.7.11\" macaddr: \"52:54:00:f4:26:a1\" disk: vda - name: \"worker1\" ipaddr: \"192.168.7.12\" macaddr: \"52:54:00:82:90:00\" disk: vda workers.name - The hostname (WITHOUT the fqdn) of the worker node you want to set workers.ipaddr - The IP address that you want set (this modifies the dhcp config file, the dns zonefile, and the reverse dns zonefile) workers.macaddr - The mac address for dhcp reservation. This option is not needed if you're doing static ips. workers.disk - The name of the disk to install RHCOS onto. NOTE: At LEAST 2 workers is needed if you're installing a standard version of OpenShift 4","title":"Worker Nodes Section"},{"location":"worker-section/#worker-nodes-section","text":"Similar to the master section; this sets up worker node configuration. Please note that this is an array. \ud83d\udea8 This section is optional if you're installing a compact cluster. workers: - name: \"worker0\" ipaddr: \"192.168.7.11\" macaddr: \"52:54:00:f4:26:a1\" disk: vda - name: \"worker1\" ipaddr: \"192.168.7.12\" macaddr: \"52:54:00:82:90:00\" disk: vda workers.name - The hostname (WITHOUT the fqdn) of the worker node you want to set workers.ipaddr - The IP address that you want set (this modifies the dhcp config file, the dns zonefile, and the reverse dns zonefile) workers.macaddr - The mac address for dhcp reservation. This option is not needed if you're doing static ips. workers.disk - The name of the disk to install RHCOS onto. NOTE: At LEAST 2 workers is needed if you're installing a standard version of OpenShift 4","title":"Worker Nodes Section"},{"location":"yaml-file-forward/","text":"The helpernode.yaml File The configuration file for the HelperNode is a YAML file that can be named anything, but will be referred to in this documentation as helpernode.yaml . This configuration file is used as the \"source of truth\" to configure and start the services needed to run the HelperNode. This config file needs to be either saved (by using the save subcommand) or passed to the start command. helpernodectl start --config helpernode.yaml When each service starts, the helpernode.yaml file is passed to the container and each individual container uses this YAML file to configure and start the services. NOTE: Currently, no validation is done by the container. It's \"garbage in/garbage out\" in it's current form. Versioning and Architecture The current version of the YAML manifest is v2 . Only x86_64 is currently supported. version: v2 arch: \"x86_64\" Plans are in place to support PPCLE and ARM . ARM support will come at after OpenShift supports ARM.","title":"The helpernode.yaml File"},{"location":"yaml-file-forward/#the-helpernodeyaml-file","text":"The configuration file for the HelperNode is a YAML file that can be named anything, but will be referred to in this documentation as helpernode.yaml . This configuration file is used as the \"source of truth\" to configure and start the services needed to run the HelperNode. This config file needs to be either saved (by using the save subcommand) or passed to the start command. helpernodectl start --config helpernode.yaml When each service starts, the helpernode.yaml file is passed to the container and each individual container uses this YAML file to configure and start the services. NOTE: Currently, no validation is done by the container. It's \"garbage in/garbage out\" in it's current form.","title":"The helpernode.yaml File"},{"location":"yaml-file-forward/#versioning-and-architecture","text":"The current version of the YAML manifest is v2 . Only x86_64 is currently supported. version: v2 arch: \"x86_64\" Plans are in place to support PPCLE and ARM . ARM support will come at after OpenShift supports ARM.","title":"Versioning and Architecture"}]}